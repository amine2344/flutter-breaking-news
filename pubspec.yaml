name: flutter_breaking_news
description: App that provibe breaking news using NewsApi
version: 1.0.1+2

environment:
  sdk: ">=2.12.0 <3.0.0"

dependencies:
  flutter:
    sdk: flutter

  # Flutter plugin providing detailed information about the device (make, model, etc.),
  # and Android or iOS version the app is running on.
  # https://pub.dev/packages/device_info#-installing-tab-
  device_info: ^0.4.2+1

  # A mixture between dependency injection and state management, built with widgets for widgets.
  provider: ^4.0.4

  # Helps to implement equality without needing to explicitly override == and hashCode.
  equatable: ^1.1.1

  # A composable, multi-platform, Future-based API for HTTP requests.
  http: ^0.12.0+4

  # Flutter widgets that make it easy to implement the BLoC design pattern.
  flutter_bloc: ^3.2.0

  # Functions that support JSON code generation via the `json_serializable` package.
  json_annotation: ^3.0.1

  # Package provides internalization and localization facilities, including message translation,
  # plurals and genders, date/number formatting and parsing, and bidirectional text.
  intl: ^0.16.1

  # Flutter library to load and cache network images. Can also be used with placeholder and
  # error widgets.
  cached_network_image: ^2.0.0

  # Flutter plugin for Firebase  ( FlutterFire Plugins )
  firebase_auth: ^0.15.5+3
  firebase_core: ^0.4.4+3
  firebase_analytics: ^5.0.11

  # Flutter plugin for Google Sign-In
  google_sign_in: ^4.2.0

  # Building card based settings forms.
  flutter_settings: ^1.0.2

  flag: ^1.0.3

  shared_preferences: ^0.5.6+3

  universal_io: ^1.0.1

  url_launcher: ^5.4.2

  flutter_webview_plugin: ^0.3.10+2

dev_dependencies:
  flutter_test:
    sdk: flutter

  # Mocks for Firebase Auth. Use this package with `google_sign_in_mocks` 
  # to write unit tests involving Firebase Authentication.
  firebase_auth_mocks: ^0.1.3
  
  # Mocks for Google Sign In.   
  google_sign_in_mocks: ^0.3.0

  #A mock framework inspired by Mockito.
  mockito: ^5.4.3

  # Tools to write binaries that run builders.
  build_runner: ^2.4.7

  # Automatically generate code for converting to and from JSON by annotating Dart classes.
  json_serializable: ^6.7.1

  # The Font Awesome Icon pack available as Flutter Icons.
  font_awesome_flutter: ^9.2.0

# The following section is specific to Flutter.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  assets:
    - assets/images/
  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware.

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  fonts:
    - family: WorkSans
      fonts:
        - asset: assets/fonts/WorkSans-Regular.ttf
        - asset: assets/fonts/WorkSans-Medium.ttf
          weight: 500
        - asset: assets/fonts/WorkSans-SemiBold.ttf
          weight: 600
        - asset: assets/fonts/WorkSans-Bold.ttf
          weight: 700
    - family: Roboto
      fonts:
        - asset: assets/fonts/Roboto-Bold.ttf
        - asset: assets/fonts/Roboto-Regular.ttf
        - asset: assets/fonts/Roboto-Medium.ttf
          weight: 400
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages
